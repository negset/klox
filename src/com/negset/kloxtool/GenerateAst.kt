package com.negset.kloxtool

import java.io.IOException
import java.io.PrintWriter
import kotlin.system.exitProcess

fun main(args: Array<String>) {
    if (args.size != 1) {
        System.err.println("Usage: generate_ast <output directory>")
        exitProcess(64)
    }
    val outputDir = args[0]
    defineAst(
        outputDir, "Expr", listOf(
            "Assign   | name: Token, value: Expr",
            "Binary   | left: Expr, operator: Token, right: Expr",
            "Grouping | expression: Expr",
            "Literal  | value: Any?",
            "Unary    | operator: Token, right: Expr",
            "Variable | name: Token",
        )
    )

    defineAst(
        outputDir, "Stmt", listOf(
            "Block      | statements: List<Stmt>",
            "Expression | expression: Expr",
            "Print      | expression: Expr",
            "Var        | name: Token, initializer: Expr?",
        )
    )
}

@Throws(IOException::class)
private fun defineAst(outputDir: String, baseName: String, types: List<String>) {
    val path = "$outputDir/$baseName.kt"
    with(PrintWriter(path, "UTF-8")) {
        println("""
            // automatically generated by GenerateAst
            package com.negset.klox
            
            sealed interface $baseName {
                fun <R> accept(visitor: Visitor<R>): R

        """.trimIndent())
        defineVisitor(this, baseName, types)
        println("}")

        // The AST classes.
        for (type in types) {
            println()
            val (className, fields) = type.split("|").map(String::trim)
            defineType(this, baseName, className, fields)
        }

        close()
    }
}

fun defineVisitor(writer: PrintWriter, baseName: String, types: List<String>) {
    with(writer) {
        println("    interface Visitor<R> {")

        for (type in types) {
            val className = type.split("|")[0].trim()
            println("        fun visit$className$baseName(${baseName.lowercase()}: $className): R")
        }

        println("    }")
    }
}

fun defineType(writer: PrintWriter, baseName: String, className: String, fields: String) {
    with(writer) {
        val props = "val " + fields.replace(", ", ", val ")
        println("""
            class $className($props) : $baseName {
                override fun <R> accept(visitor: $baseName.Visitor<R>): R {
                    return visitor.visit$className$baseName(this)
                }
            }
        """.trimIndent())
    }
}
